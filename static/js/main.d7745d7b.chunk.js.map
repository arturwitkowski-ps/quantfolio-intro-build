{"version":3,"sources":["images/logo-bright.png","utility/chart-helpers.js","utility/api.js","components/StocksTable/StocksTable.jsx","components/StocksLegend/StocksLegend.jsx","components/StocksChart/StocksChart.jsx","components/Homepage/Homepage.jsx","App.js","reportWebVitals.js","index.js"],"names":["stockCurrencies","EUR","NOK","USD","stockColors","API_URL","getStocks","symbols","currency","stocksInfo","fetch","join","then","data","json","fetchedSelectedStocks","selectedStocks","stockSeries","forEach","oneDay","newStockRecord","Date","recorded","getTime","open","high","low","close","foundStock","find","stock","_id","stock_id","push","stockName","searchedStock","id","name","color","turboThreshold","createSeriesFromData","StocksTable","zoom","className","map","style","backgroundColor","cagr","sharpe","StocksLegend","toggleStock","highlightStock","symbol","includes","onClick","onMouseEnter","onMouseLeave","Highcharts","setOptions","lang","rangeSelectorZoom","StocksChart","highchartsConfig","chartComponent","changeCurrency","selectedCurrency","highcharts","constructorType","options","ref","Object","values","curr","Homepage","useRef","useState","setSelectedStocks","setStocksInfo","isLoading","setisLoading","setZoom","setSelectedCurrency","handleZoom","series","chart","type","panning","enabled","tooltip","split","xAxis","labels","title","yAxis","lineColor","scrollbar","navigator","credits","rangeSelector","inputEnabled","allButtonsEnabled","labelStyle","buttons","count","text","dataGrouping","units","events","click","buttonTheme","width","selected","createHighchartsConfig","setHighchartsConfig","loadStocks","useCallback","pickedStocks","pickedCurrency","handleLoading","catch","err","console","log","finally","loadingStatus","current","showLoading","hideLoading","useEffect","fetchedStocksData","sort","a","b","src","Logo","alt","stockSymbol","oldSelectedStocks","position","indexOf","newSelectedStocks","splice","newState","length","points","point","setState","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d7745d7b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo-bright.1ab74d6b.png\";","const stockCurrencies = {\n  EUR: 'EUR',\n  NOK: 'NOK',\n  USD: 'USD'\n};\n\nconst stockColors = [\n  'red',\n  'yellow',\n  'green',\n  'royalblue',\n  'aqua',\n  'hotpink',\n  'darkblue',\n];\n\nconst createSeriesFromData = (selectedStocks, stocksInfo) => {\n  const stockSeries = [];\n  selectedStocks.forEach(oneDay => {\n    const newStockRecord = [\n      (new Date(oneDay.recorded)).getTime(),\n      oneDay.open,\n      oneDay.high,\n      oneDay.low,\n      oneDay.close,\n    ];\n\n    const foundStock = stockSeries.find(stock => stock._id === oneDay.stock_id)\n    if (foundStock) {\n      foundStock.data.push(newStockRecord)\n    } else {\n      const stockName = stocksInfo.find(searchedStock => searchedStock.id === oneDay.stock_id);\n\n      stockSeries.push({\n        data: [newStockRecord],\n        name: stockName.name,\n        color: stockColors[oneDay.stock_id - 1],\n        turboThreshold: 20000,\n        _id: oneDay.stock_id,\n      });\n    }\n  })\n\n  return stockSeries\n}\n\nconst createHighchartsConfig = (handleZoom = () => {}) => ({\n    series: [],\n    chart: {\n      type: 'ohlc',\n      backgroundColor: 'transparent',\n      style: {\n        color: '#FFF',\n      },\n      panning: {\n        enabled: false\n      }\n    },\n    tooltip: {\n      split: false\n    },\n    xAxis: {\n      labels: {\n        style: {\n          color: '#FFF',\n        },\n      },\n      title: {\n        style: {\n          color: '#FFF',\n        },\n      },\n    },\n    yAxis: {\n      lineColor: '#DDD',\n      labels: {\n        style: {\n          color: '#FFF',\n        },\n      },\n      title: {\n        style: {\n          color: '#FFF',\n        },\n      },\n    },\n    scrollbar: {\n      enabled: false,\n    },\n    navigator: {\n      enabled: false,\n    },\n    credits: {\n      enabled: false,\n    },\n    rangeSelector: {\n      inputEnabled: false,\n      allButtonsEnabled: true,\n      labelStyle: {\n        color: 'white',\n      },\n      buttons: [\n        {\n          type: 'year',\n          count: 1,\n          text: '1Y',\n          dataGrouping: {\n            units: [['day', [1]]],\n          },\n          events: {\n            click: () => handleZoom('1y')\n          }\n        },\n        {\n          type: 'year',\n          count: 5,\n          text: '5Y',\n          dataGrouping: {\n            units: [['day', [1]]],\n          },\n          events: {\n            click: () => handleZoom('5y')\n          }\n        },\n        {\n          type: 'all',\n          text: 'MAX',\n          dataGrouping: {\n            units: [['day', [1]]],\n          },\n          events: {\n            click: () => handleZoom('max')\n          }\n        },\n      ],\n      buttonTheme: {\n        width: 40,\n      },\n      selected: 0,\n    },\n  });\n\n\nexport {\n  createHighchartsConfig,\n  stockColors,\n  stockCurrencies,\n  createSeriesFromData,\n}","import { createSeriesFromData } from \"./chart-helpers\";\n\nconst API_URL = \"https://apps.lukaszpiotrkowski.pl/stockapp/\";\n\nconst getStocksData = () => fetch(`${API_URL}/stocks?period=1,5,max`).then(data => data.json());\n\nconst getStocks =\n  (symbols, currency, stocksInfo) =>\n    fetch(`${API_URL}/time_series?stocks=${symbols.join()}&currency=${currency}`)\n      .then(data => data.json())\n      .then((fetchedSelectedStocks) => {\n        return createSeriesFromData(fetchedSelectedStocks, stocksInfo);\n      });\n\nexport {\n  getStocksData,\n  getStocks,\n}","import React from 'react'\n\nimport { stockColors } from '../../utility/chart-helpers'\n\nimport './StocksTable.css'\n\nconst StocksTable = ({stocksInfo, zoom}) => {\n  return (\n    <section className=\"stocks\">\n      <table>\n        <thead>\n          <tr>\n            <td></td>\n            <td>Stock</td>\n            <td>CAGR</td>\n            <td>Sharpe</td>\n          </tr>\n        </thead>\n        <tbody>\n          {stocksInfo ? stocksInfo.map((stock) => (\n            <tr key={`stockTable-${stock.id}`}>\n              <td>\n                <div\n                  className=\"stock-circle\"\n                  style={{ backgroundColor: stockColors[stock.id - 1] }}\n                ></div>\n              </td>\n              <td>{stock.name}</td>\n              <td>{`${stock[zoom].cagr}%`}</td>\n              <td>{stock[zoom].sharpe}</td>\n            </tr>\n          )) : null}\n        </tbody>\n      </table>\n      {!stocksInfo ? <div className=\"loading\"><h3>Loading...</h3></div> : ''}\n    </section>\n  )\n}\n\nexport default StocksTable\n","import React from 'react'\n\nimport { stockColors } from '../../utility/chart-helpers';\n\nimport './StocksLegend.css';\n\nconst StocksLegend = ({ stocksInfo, selectedStocks, toggleStock, highlightStock }) => {\n  return (\n    <section className=\"legend\">\n      {stocksInfo ? stocksInfo.map(({ name, id, symbol }) => (\n        <div\n          key={`stockLegend-${id}`}\n          className={`legend-stock${!selectedStocks.includes(symbol) ? ' legend-stock--hidden' : ''\n            }`}\n          onClick={() => toggleStock(symbol)}\n          onMouseEnter={() => highlightStock(name, 'hover')}\n          onMouseLeave={() => highlightStock(name, 'normal')}\n        >\n          <div\n            className=\"stock-circle\"\n            style={{ backgroundColor: stockColors[id - 1] }}\n          ></div>\n          <div className=\"legend-text\">{name}</div>\n        </div>\n      )) : <div className=\"loading\"><h3>Loading...</h3></div>}\n    </section>\n  )\n}\n\nexport default StocksLegend\n","import React from 'react'\nimport Highcharts from 'highcharts/highstock';\nimport HighchartsReact from 'highcharts-react-official';\n\nimport { stockCurrencies } from '../../utility/chart-helpers';\n\nimport './StocksChart.css';\n\nHighcharts.setOptions({\n  lang: {\n    rangeSelectorZoom: 'Period'\n  },\n})\n\nconst StocksChart = ({ \n  highchartsConfig, \n  chartComponent, \n  changeCurrency, \n  selectedCurrency,\n}) => {\n  return (\n    <section className=\"chart\">\n      <HighchartsReact\n        highcharts={Highcharts}\n        constructorType={'stockChart'}\n        options={highchartsConfig}\n        ref={chartComponent}\n      />\n      <div className=\"currency\">\n        {Object.values(stockCurrencies).map(curr => (\n          <div\n            key={curr}\n            className={`currency-button${selectedCurrency === curr ? ' currency-button--selected' : ''}`}\n            onClick={() => changeCurrency(curr)}\n          >{curr}</div>\n        ))}\n      </div>\n    </section>\n  )\n}\n\nexport default StocksChart\n","import React, { useState, useRef, useEffect, useCallback } from 'react';\n\nimport Logo from '../../images/logo-bright.png';\nimport { getStocksData, getStocks } from '../../utility/api';\nimport { createHighchartsConfig, stockCurrencies } from '../../utility/chart-helpers';\n\nimport './Homepage.css';\nimport StocksTable from '../StocksTable/StocksTable';\nimport StocksLegend from '../StocksLegend/StocksLegend';\nimport StocksChart from '../StocksChart/StocksChart';\n\nconst Homepage = () => {\n  const chartComponent = useRef(null);\n  const [selectedStocks, setSelectedStocks] = useState([]);\n  const [stocksInfo, setStocksInfo] = useState();\n  const [isLoading, setisLoading] = useState(false);\n  const [zoom, setZoom] = useState('1y');\n  const [selectedCurrency, setSelectedCurrency] = useState(stockCurrencies.USD);\n  const [highchartsConfig, setHighchartsConfig] = useState(createHighchartsConfig(setZoom));\n\n  const loadStocks = useCallback((pickedStocks, pickedCurrency) => {\n    if (!stocksInfo) return;\n    handleLoading(true);\n\n    getStocks(pickedStocks, pickedCurrency, stocksInfo)\n      .then((stockSeries) => {\n        setHighchartsConfig({ series: stockSeries });\n      })\n      .catch(err => console.log(err))\n      .finally(() => \n        handleLoading(false)\n      );\n  }, [stocksInfo]);\n  \n  const handleLoading = (loadingStatus) => {\n    if (loadingStatus) {\n      chartComponent.current.chart.showLoading();\n    } else {\n      chartComponent.current.chart.hideLoading()\n    }\n    setisLoading(loadingStatus);\n  }\n\n  const changeCurrency = (currency) => {\n    if (isLoading) return;\n    setSelectedCurrency(currency);\n    loadStocks(selectedStocks, currency);\n  }\n  \n  const toggleStock = (stockSymbol) => {\n    if (isLoading) return;\n    setSelectedStocks((oldSelectedStocks) => {\n      const position = oldSelectedStocks.indexOf(stockSymbol);\n      const newSelectedStocks = [...oldSelectedStocks];\n      \n      if (position !== -1) {\n        newSelectedStocks.splice(position, 1);\n      } else {\n        newSelectedStocks.push(stockSymbol);\n      }\n\n      loadStocks(newSelectedStocks, selectedCurrency)\n      return newSelectedStocks;\n    });\n  };\n  \n  const highlightStock = (stockName, newState) => {\n    if (selectedStocks.length === 0) return;\n    const foundStock = chartComponent.current.chart.series.find(series => series.name === stockName);\n\n    if(!foundStock) return;\n    foundStock.points.forEach(point => {\n      point.setState(newState)\n    });\n  }\n  \n    useEffect(() => {\n      getStocksData()\n        .then((fetchedStocksData) => {\n          fetchedStocksData.sort((a, b) => a.id > b.id)\n          setStocksInfo(fetchedStocksData)\n        })\n        .catch(err => console.log(err));\n    }, []);\n  \n  return (\n    <div className=\"introProject\">\n      <header>\n        <img src={Logo} alt=\"Quantfol.io logo\" />\n      </header>\n      <main>\n        <StocksChart \n          highchartsConfig={highchartsConfig} \n          chartComponent={chartComponent} \n          changeCurrency={changeCurrency} \n          selectedCurrency={selectedCurrency} \n        />\n        <StocksLegend \n          stocksInfo={stocksInfo} \n          selectedStocks={selectedStocks} \n          toggleStock={toggleStock} \n          highlightStock={highlightStock} \n        />\n        <StocksTable stocksInfo={stocksInfo} zoom={zoom} />\n      </main>\n    </div>\n  );\n};\n\nexport default Homepage;\n","import React from 'react';\n\nimport Homepage from './components/Homepage/Homepage';\nimport './App.css';\n\nconst App = () => {\n  return (\n    <div id=\"App\">\n      <Homepage />\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}