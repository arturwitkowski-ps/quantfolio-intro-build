{"version":3,"sources":["images/logo-bright.png","utility/charts-config.js","utility/api.js","components/Homepage/Homepage.jsx","App.js","reportWebVitals.js","index.js"],"names":["stockCurrencies","EUR","NOK","USD","stockColors","createHighchartsConfig","seriesData","series","chart","type","backgroundColor","style","color","tooltip","split","xAxis","labels","title","yAxis","lineColor","navigator","enabled","credits","rangeSelector","inputEnabled","allButtonsEnabled","labelStyle","buttons","count","text","dataGrouping","units","buttonTheme","width","selected","API_URL","Homepage","chartComponent","useRef","useState","selectedStocks","setSelectedStocks","stocksInfo","setStocksInfo","selectedCurrency","setSelectedCurrency","highchartsConfig","setHighchartsConfig","loadStocks","useCallback","pickedStocks","pickedCurrency","console","log","current","showLoading","symbols","currency","fetch","join","then","data","json","fetchedSelectedStocks","stockSeries","forEach","oneDay","newStockRecord","Date","recorded","getTime","open","high","low","close","stock_id","push","stockName","find","searchedStock","id","name","turboThreshold","getStocks","catch","err","finally","hideLoading","useEffect","fetchedStocksData","filter","stockDataElement","sort","a","b","className","src","Logo","alt","highcharts","Highcharts","constructorType","options","ref","Object","values","map","curr","onClick","symbol","includes","stockSymbol","oldSelectedStocks","position","indexOf","newSelectedStocks","splice","max","cagr","sharpe","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3035d815.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo-bright.1ab74d6b.png\";","const stockSymbols = ['', 'VTVT', 'LOB', 'NTRA', 'OLLI', 'RUN', 'CNFR', 'RPD'];\n\nconst stockCurrencies = {\n  EUR: 'EUR',\n  NOK: 'NOK',\n  USD: 'USD'\n};\n\nconst stockColors = [\n  '',\n  'red',\n  'yellow',\n  'green',\n  'royalblue',\n  'aqua',\n  'hotpink',\n  'darkblue',\n];\n\nconst createHighchartsConfig = (seriesData) => ({\n    series: seriesData ?? [],\n    chart: {\n      type: 'ohlc',\n      backgroundColor: 'transparent',\n      style: {\n        color: '#FFF',\n      },\n    },\n    tooltip: {\n      split: false\n    },\n    xAxis: {\n      labels: {\n        style: {\n          color: '#FFF',\n        },\n      },\n      title: {\n        style: {\n          color: '#FFF',\n        },\n      },\n    },\n    yAxis: {\n      lineColor: '#DDD',\n      labels: {\n        style: {\n          color: '#FFF',\n        },\n      },\n      title: {\n        style: {\n          color: '#FFF',\n        },\n      },\n    },\n    navigator: {\n      enabled: false,\n    },\n    credits: {\n      enabled: false,\n    },\n    rangeSelector: {\n      inputEnabled: false,\n      allButtonsEnabled: true,\n      labelStyle: {\n        color: 'white',\n      },\n      buttons: [\n        {\n          type: 'year',\n          count: 1,\n          text: '1Y',\n          dataGrouping: {\n            units: [['day', [1]]],\n          },\n        },\n        {\n          type: 'year',\n          count: 5,\n          text: '5Y',\n          dataGrouping: {\n            units: [['day', [1]]],\n          },\n        },\n        {\n          type: 'all',\n          text: 'MAX',\n          dataGrouping: {\n            units: [['day', [1]]],\n          },\n        },\n      ],\n      buttonTheme: {\n        width: 40,\n      },\n      selected: 0,\n    },\n  });\n\n\nexport {\n  createHighchartsConfig,\n  stockColors,\n  stockSymbols,\n  stockCurrencies,\n}","import { stockColors } from \"./charts-config\"; \n\nconst API_URL = \"http://vps-a4acc035.vps.ovh.net:8000\";\n\nconst getStocksData = () => fetch(`${API_URL}/stocks`);\n\nconst getStocks = \n    (symbols, currency = 'USD', stocksInfo) => \n        fetch(`${API_URL}/time_series?stocks=${symbols.join()}&currency=${currency}`)\n            .then(data => data.json())\n            .then((fetchedSelectedStocks) => {\n                const stockSeries = [];\n                fetchedSelectedStocks.forEach(oneDay => {\n                    const newStockRecord = [\n                    (new Date(oneDay.recorded)).getTime(),\n                    oneDay.open,\n                    oneDay.high,\n                    oneDay.low,\n                    oneDay.close,\n                    ];\n\n                    if (oneDay.stock_id in stockSeries) {\n                    stockSeries[oneDay.stock_id].data.push(newStockRecord)\n                    } else {\n                    const stockName = stocksInfo.find(searchedStock => searchedStock.id === oneDay.stock_id);\n\n                    stockSeries[oneDay.stock_id] = {\n                        data: [newStockRecord],\n                        name: stockName.name,\n                        color: stockColors[oneDay.stock_id],\n                        turboThreshold: 20000\n                    };\n                    }\n                })\n                console.log(stockSeries)\n                return stockSeries;\n            });\n\nexport {\n    getStocksData,\n    getStocks,\n}","import React, { useState, useRef, useEffect, useCallback } from 'react';\nimport Highcharts from 'highcharts/highstock';\nimport HighchartsReact from 'highcharts-react-official';\n\nimport Logo from '../../images/logo-bright.png';\nimport { getStocksData, getStocks } from '../../utility/api';\nimport { createHighchartsConfig, stockColors, stockCurrencies } from '../../utility/charts-config';\n\nimport './Homepage.css';\n\nconst Homepage = () => {\n  const chartComponent = useRef(null);\n  const [selectedStocks, setSelectedStocks] = useState([]);\n  const [stocksInfo, setStocksInfo] = useState();\n  const [selectedCurrency, setSelectedCurrency] = useState(stockCurrencies.USD);\n  const [highchartsConfig, setHighchartsConfig] = useState(createHighchartsConfig());\n\n  const loadStocks = useCallback((pickedStocks, pickedCurrency) => {\n    console.log('load')\n    if (!stocksInfo) return;\n    chartComponent.current.chart.showLoading();\n\n    getStocks(pickedStocks, pickedCurrency, stocksInfo)\n      .then((stockSeries) => {\n        console.log('loadeded')\n        setHighchartsConfig(createHighchartsConfig(stockSeries));\n      })\n      .catch(err => console.log(err))\n      .finally(() => \n        chartComponent.current.chart.hideLoading()\n      );\n  }, [stocksInfo]);\n\n  useEffect(() => {\n    getStocksData()\n      .then(data => data.json())\n      .then((fetchedStocksData) => {\n        fetchedStocksData = fetchedStocksData.filter(stockDataElement => stockDataElement.type === 'Common Stack')\n        fetchedStocksData.sort((a, b) => a.id > b.id)\n        setStocksInfo(fetchedStocksData)\n      })\n      .catch(err => console.log(err))\n  }, []);\n\n  const changeCurrency = (currency) => {\n    setSelectedCurrency(currency);\n    loadStocks(selectedStocks, currency);\n  }\n\n  const toggleStock = (stockSymbol) => {\n    setSelectedStocks((oldSelectedStocks) => {\n      const position = oldSelectedStocks.indexOf(stockSymbol);\n      const newSelectedStocks = [...oldSelectedStocks];\n      \n      if (position !== -1) {\n        newSelectedStocks.splice(position, 1);\n      } else {\n        newSelectedStocks.push(stockSymbol);\n      }\n\n\n      loadStocks(newSelectedStocks, selectedCurrency)\n      return newSelectedStocks;\n    });\n  };\n\n  return (\n    <div className=\"introProject\">\n      <header>\n        <img src={Logo} alt=\"Quantfol.io logo\" />\n      </header>\n      <main>\n        <section className=\"chart\">\n          <HighchartsReact\n            highcharts={Highcharts}\n            constructorType={'stockChart'}\n            options={highchartsConfig}\n            ref={chartComponent}\n          />\n          <div className=\"currency\">\n            {Object.values(stockCurrencies).map(curr => (\n              <div \n                key={curr}\n                className={`currency-button${selectedCurrency === curr ? ' currency-button--selected': ''}`}\n                onClick={() => changeCurrency(curr)}\n              >{curr}</div>\n            ))}\n          </div>\n        </section>\n        <section className=\"legend\">\n        {stocksInfo ? stocksInfo.map(({ name, id, symbol }) => (\n            <div\n              key={`stockLegend-${id}`}\n              className={`legend-stock${\n                !selectedStocks.includes(symbol) ? ' legend-stock--hidden' : ''\n              }`}\n              onClick={() => toggleStock(symbol)}\n            >\n              <div\n                className=\"stock-circle\"\n                style={{ backgroundColor: stockColors[id] }}\n              ></div>\n              <div className=\"legend-text\">{name}</div>\n            </div>\n          )) : <div className=\"loading\"><h3>Loading...</h3></div>}\n        </section>\n        <section className=\"stocks\">\n          <table>\n            <thead>\n              <tr>\n                <td></td>\n                <td>Stock</td>\n                <td>CAGR</td>\n                <td>Sharpe</td>\n              </tr>\n            </thead>\n            <tbody>\n              {stocksInfo ? stocksInfo.map(({ name, max, id }) => (\n                <tr key={`stockTable-${id}`}>\n                  <td>\n                    <div\n                      className=\"stock-circle\"\n                      style={{ backgroundColor: stockColors[id] }}\n                    ></div>\n                  </td>\n                  <td>{name}</td>\n                  <td>{`${max.cagr}%`}</td>\n                  <td>{max.sharpe}</td>\n                </tr>\n              )) : null}\n            </tbody>\n          </table>\n          {!stocksInfo ? <div className=\"loading\"><h3>Loading...</h3></div> : ''}\n        </section>\n      </main>\n    </div>\n  );\n};\n\nexport default Homepage;\n","import React from 'react';\n\nimport Homepage from './components/Homepage/Homepage';\nimport './App.css';\n\nconst App = () => {\n  return (\n    <div id=\"App\">\n      <Homepage />\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}